var documenterSearchIndex = {"docs":
[{"location":"#Cyclotomics.jl","page":"Home","title":"Cyclotomics.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Cyclotomics package implements cyclotomic numbers which are sums of roots of unity. The coefficients of the sum are in general taken from a ring. E.g. the imaginary unit is represented by E(4), the fourth root of 1, while algebraic number (1 + √5)/2 can be written exactly as E(5) + E(5)^4.","category":"page"},{"location":"","page":"Home","title":"Home","text":"In summary the package implements","category":"page"},{"location":"","page":"Home","title":"Home","text":"Cyclotomic numbers as structs based on SparseVectors,\nbasic arithmetic on those: module and ring structures that take advantage of (lazy) normalization,\na few predicates (e.g. isreal) and conversions to float/Rational/Complex numbers,\nZumbroich basis (by three different methods), thread-safe and memoized.","category":"page"},{"location":"#Example-uses","page":"Home","title":"Example uses","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using Cyclotomics\n\njulia> e = E(45) # 45-th root of unity\n ζ₄₅\n\njulia> isone(E(5)^5) # 5-th root of unity to power 5 gives the unit\n true","category":"page"},{"location":"#Normal-forms","page":"Home","title":"Normal forms","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Consider the following element","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> w = e + e^2 + e^8 + e^11 + e^17 + e^26 + e^29 + e^38 + e^44\n ζ₄₅ + ζ₄₅² + ζ₄₅⁸ + ζ₄₅¹¹ + ζ₄₅¹⁷ + ζ₄₅²⁶ + ζ₄₅²⁹ + ζ₄₅³⁸ + ζ₄₅⁴⁴","category":"page"},{"location":"","page":"Home","title":"Home","text":"Since the vector space spanned by 45-th roots of unity is of dimension less than 44 not all roots are needed to express a cyclotomic number of degree 45. For example the following is a different way to write w:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> x = E(45) + E(45)^5 # or E(45) + E(9)\n ζ₄₅ + ζ₄₅² + ζ₄₅⁸ + ζ₄₅¹¹ + ζ₄₅¹⁷ + ζ₄₅²⁶ + ζ₄₅²⁹ + ζ₄₅³⁸ + ζ₄₅⁴⁴\n\njulia> x == w\n true","category":"page"},{"location":"","page":"Home","title":"Home","text":"And that's 9-th root of unity in its normal form (i.e. written in the canonical basis):","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> E(45, 5) # == E(45)^5 == E(9)\n -ζ₉⁴-ζ₉⁷\n","category":"page"},{"location":"#Computing-with-cyclotomics","page":"Home","title":"Computing with cyclotomics","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"We define module structures with different coefficients","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> E(45, 5)\n-ζ₉⁴-ζ₉⁷\n\njulia> 3E(45, 5)\n-3*ζ₉⁴ -3*ζ₉⁷\n\njulia> 2.0E(45, 5) - E(9)\n-1.0*ζ₉⁴ -1.0*ζ₉⁷\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"as well as conversions to standard julia types","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> complex(2.0x)\n3.5126250237210965 + 1.5639214212932075im\n\njulia> float(E(3))\nERROR: InexactError: float(Float64,  1*E(3)^1)\nStacktrace:\n[1] float(#unused#::Type{Float64}, α::Cyclotomic{Int64, SparseArrays.SparseVector{Int64, Int64}})\n  @ Cyclotomics ~/.julia/dev/Cyclotomics/src/cycl.jl:168\n[2] float(α::Cyclotomic{Int64, SparseArrays.SparseVector{Int64, Int64}})\n  @ Cyclotomics ~/.julia/dev/Cyclotomics/src/cycl.jl:171\n[3] top-level scope\n  @ REPL[15]:1\n\njulia> complex(E(3))\n-0.4999999999999998 + 0.8660254037844387im\n\njulia> float(E(3) + E(3)^2)\n-1.0\n\njulia> Rational(E(3) + E(3)^2)\n-1//1\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"When possible we try to promote to Cyclotomics","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> E(5) + im\n-ζ₂₀ + ζ₂₀⁴-ζ₂₀⁹-ζ₂₀¹³-ζ₂₀¹⁷\n\njulia> (1.0+2im) + E(5)\n-2.0*ζ₂₀ -1.0*ζ₂₀⁸ -2.0*ζ₂₀⁹ -1.0*ζ₂₀¹² -2.0*ζ₂₀¹³ -1.0*ζ₂₀¹⁶ -2.0*ζ₂₀¹⁷\n\njulia> (1.0+2.0im) - 2E(4)\n1.0\n\njulia> typeof(ans)\nCyclotomic{Float64, SparseArrays.SparseVector{Float64, Int64}}\n\njulia> isreal((1.0+2.0im) - 2E(4))\ntrue\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"However cyclotomic numbers can store non-rational algebraic numbers:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> z = E(5)^2+E(5)^3\n ζ₅² + ζ₅³\n\njulia> isreal(z)\n true\n\njulia> Rational(z)\nERROR: InexactError: Rational( 1*E(5)^2 + 1*E(5)^3)\nStacktrace:\n [1] Rational{Int64}(α::Cyclotomic{Int64, SparseArrays.SparseVector{Int64, Int64}})\n   @ Cyclotomics ~/.julia/dev/Cyclotomics/src/cycl.jl:192\n [2] Rational(α::Cyclotomic{Int64, SparseArrays.SparseVector{Int64, Int64}})\n   @ Cyclotomics ~/.julia/dev/Cyclotomics/src/cycl.jl:195\n [3] top-level scope\n   @ none:1\n\njulia> z ≈ (-1-sqrt(5))/2\ntrue\n","category":"page"},{"location":"#Low-level-constructors","page":"Home","title":"Low level constructors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"One can also construct Cyclotomic directly from a vector, which is then used as the underlying vector of coefficients. Here these are dense, while by default Cyclotomic uses sparse storage.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> Cyclotomic(5, [0,1,0,0,0])\n ζ₅\n\njulia> Cyclotomic(5, [0,0,1,0,0])\n ζ₅²\n\njulia> Cyclotomic(5, [1,1,1,1,1]) # the sum of all roots == 0\n 0\n","category":"page"},{"location":"#Cyclotomics:-constructors-and-low-level-access","page":"Home","title":"Cyclotomics: constructors and low level access","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Cyclotomic\nCyclotomics.E\nCyclotomics.conductor\n\nCyclotomics.exponents\nCyclotomics.coeffs\nBase.values\nBase.conj\n\nCyclotomics.dense\nCyclotomics.sparse","category":"page"},{"location":"#Cyclotomics.Cyclotomic","page":"Home","title":"Cyclotomics.Cyclotomic","text":"Cyclotomic(n, coeffs::AbstractVector)\n\nElement of n-th cyclotomic field with coefficients stored as coeffs.\n\nTo access the internals of a cyclotomic use API functions:\n\nconductor - the conductor of a cyclotomic, i.e. the n used currently for\n\nstorage. This might not be the minimal embeding field of a cyclotomic.\n\ngetindex/setindex! - use α[i] to access the coefficient at i-th power\n\nof a cyclotomic (in a circular fashion)\n\nvalues/exponents - paired iterators over non zero coefficients/exponents\n\ncorresponding to non-zero coefficients\n\nnormalform! - bring a cyclotomic to its unique representation as given by\n\nZumbroich basis (also available in non-modifying form).\n\nIteration over non-zero coefficients in Cyclotomic is provided by exps_coeffs which produces pairs (exp, coeff) of exponent and corresponding coefficient.\n\n\n\n\n\n","category":"type"},{"location":"#Cyclotomics.E","page":"Home","title":"Cyclotomics.E","text":"E(n[, i=1])\n\nReturn the i-th power of n-th root of unity with sparse vector as storage.\n\n\n\n\n\n","category":"function"},{"location":"#Cyclotomics.conductor","page":"Home","title":"Cyclotomics.conductor","text":"conductor(α::Cyclotomic)\n\nReturn the conductor, i.e. the degree of cyclotomic field α belongs to.\n\n\n\n\n\n","category":"function"},{"location":"#Cyclotomics.exponents","page":"Home","title":"Cyclotomics.exponents","text":"exponents(α::Cyclotomic)\n\nReturn an iterator over non-zero exponents of α, beginning at 0-th one. Matched iterator over coefficients is provided by @ref(values).\n\n\n\n\n\n","category":"function"},{"location":"#Cyclotomics.coeffs","page":"Home","title":"Cyclotomics.coeffs","text":"coeffs(α::Cyclotomic)\n\nReturn the coefficients of α as stored.\n\n\n\n\n\n","category":"function"},{"location":"#Base.values","page":"Home","title":"Base.values","text":"values(α::Cyclotomic)\n\nReturn an iterator over non-zero coefficients of α, beginning at 0-th one. Matched iterator over exponents is provided by @ref(exponents).\n\n\n\n\n\n","category":"function"},{"location":"#Base.conj","page":"Home","title":"Base.conj","text":"conj(α::Cyclotomic[, n::Integer=1])\n\nReturn the n-th conjugate of α, i.e. the image of α under the n-th Frobenious homomorphism.\n\nIf n is co-prime to the conductor of α the map defines Galois automorphism. Note that the default choice for n=-1 corresponds to the standard complex conjugation.\n\n\n\n\n\n","category":"function"},{"location":"#Cyclotomics.dense","page":"Home","title":"Cyclotomics.dense","text":"dense(α::Cyclotomic)\n\nReturn a copy of α with coefficients stored in dense Vector.\n\n\n\n\n\n","category":"function"},{"location":"#SparseArrays.sparse","page":"Home","title":"SparseArrays.sparse","text":"sparse(α::Cyclotomic)\n\nReturn a copy of α with coefficients stored in SparseVector.\n\n\n\n\n\n","category":"function"},{"location":"#Embeddings-and-normal-forms","page":"Home","title":"Embeddings and normal forms","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Cyclotomics.reduced_embedding\nCyclotomics.embed\n\nCyclotomics.isnormalized\nCyclotomics.normalform!\nCyclotomics.normalform","category":"page"},{"location":"#Cyclotomics.reduced_embedding","page":"Home","title":"Cyclotomics.reduced_embedding","text":"reduced_embedding(α::Cyclotomic{T,V}[, m::Integer=1])\n\nReturn the reduced embedding of α into m-th cyclotomic field.\n\nWhen m=1, the embedding into possibly smallest degree is returned.\n\n\n\n\n\n","category":"function"},{"location":"#Cyclotomics.embed","page":"Home","title":"Cyclotomics.embed","text":"embed(α::Cyclotomic, m::Integer)\n\nEmbed α into the m-th cyclotomic field. m can be either larger, or smaller than the conductor of α, however either conductor(α) must divide m, or the other way around.\n\n\n\n\n\n","category":"function"},{"location":"#Cyclotomics.isnormalized","page":"Home","title":"Cyclotomics.isnormalized","text":"isnormalized(α::Cyclotomic, basis)\n\nCheck if α is already in normal form with respect to the given basis.\n\n\n\n\n\n","category":"function"},{"location":"#Cyclotomics.normalform!","page":"Home","title":"Cyclotomics.normalform!","text":"normalform!(α::Cyclotomic[, tmp=dense(α)]; basis_forbidden=...)\n\nReduces α to the Zumbroich basis in-place. Note that unless α has dense storage the operation will need at least one dense tmp::Cyclotomic.\n\n\n\n\n\n","category":"function"},{"location":"#Cyclotomics.normalform","page":"Home","title":"Cyclotomics.normalform","text":"normalform(α::Cyclotomic)\n\nReduces α to the Zumbroich basis.\n\n\n\n\n\n","category":"function"},{"location":"#Internals","page":"Home","title":"Internals","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Base.hash","category":"page"},{"location":"#Base.hash","page":"Home","title":"Base.hash","text":"hash(α::Cyclotomic[, h::UInt])\n\nA basic hashing function for cyclotomic elements; Note that unlike the Base types hashing of Cyclotomics is expensive as it necessitates reducing to minimal embeding. This is to keep hashing consistent and reliable with respect to ==, i.e. that the equality of elements implies the equality of hashes.\n\n\n\n\n\n","category":"function"},{"location":"#Technicalities:-Zumbroich-basis","page":"Home","title":"Technicalities: Zumbroich basis","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"One can naively represent cyclotomic number as a vector of n coefficients, corresponding to n-th root of identity. However since there are relations among them (e.g. the sum of all is equal to 0), the actual dimension of the vector space is usually much smaller than n. Zumbroich basis is the set of n-th roots of unity which are linearly independent as vectors in the subspace (i.e. allow to express any cyclotomic number as sum of them).","category":"page"},{"location":"","page":"Home","title":"Home","text":"There are three implementations provided by the package:","category":"page"},{"location":"","page":"Home","title":"Home","text":"zumbroich_plain following the description in the documentation of GAP system\nzumbroich_direct which attempts to compute the basis directly\nzumbroich_viacomplement which computes the complement of the basis (the default).","category":"page"},{"location":"","page":"Home","title":"Home","text":"My understanding and the implementation are based on the wonderful documenting comments at the top of cyclotom.c from GAP project. Check them out!","category":"page"},{"location":"","page":"Home","title":"Home","text":"!!! note The package uses function zumbroich_basis (which defaults to zumbroich_viacomplement) in its source code. To avoid recomputation the basis over and over the function is memoized for Int arguments.","category":"page"}]
}
